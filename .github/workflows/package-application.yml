name: Package

on:
  push:
    tags:
      - v*.*.*
  workflow_dispatch:

jobs:
  download-artifacts:
    name: Download Build Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        shell: bash
        run: |
          VERSION=$(git describe --tags --always --dirty)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download Linux Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: system-bridge-linux-${{ env.VERSION }}
          path: ${{ github.workspace }}

      - name: Download Windows Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: system-bridge-windows-${{ env.VERSION }}
          path: ${{ github.workspace }}

      - name: Upload Artifacts for Packaging
        uses: actions/upload-artifact@v4
        with:
          name: system-bridge-binaries-${{ env.VERSION }}
          path: |
            ${{ github.workspace }}/system-bridge-linux
            ${{ github.workspace }}/system-bridge-windows.exe

  linux-package:
    name: Package for Linux
    runs-on: ubuntu-latest
    needs:
      - download-artifacts
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        shell: bash
        run: |
          VERSION=$(git describe --tags --always --dirty)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: system-bridge-binaries-${{ env.VERSION }}
          path: ${{ github.workspace }}

      - name: Setup executable
        run: |
          chmod +x ${{ github.workspace }}/system-bridge-linux
          mkdir -p ${{ github.workspace }}/dist

      - name: Install AppImage tools
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool

      - name: Install packaging dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg fakeroot rpm

      - name: Create AppImage
        run: |
          chmod +x scripts/linux/create-appimage.sh
          ./scripts/linux/create-appimage.sh

      - name: Create DEB package
        run: |
          chmod +x scripts/linux/create-deb.sh
          ./scripts/linux/create-deb.sh

      - name: Create RPM package
        run: |
          chmod +x scripts/linux/create-rpm.sh
          ./scripts/linux/create-rpm.sh

      - name: Upload Linux Packages
        uses: actions/upload-artifact@v4
        with:
          name: system-bridge-linux-packages-${{ env.VERSION }}
          path: dist/*
          retention-days: 7

  windows-package:
    name: Package for Windows
    runs-on: windows-latest
    needs:
      - download-artifacts
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        shell: bash
        run: |
          VERSION=$(git describe --tags --always --dirty)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: system-bridge-binaries-${{ env.VERSION }}
          path: ${{ github.workspace }}

      - name: Create Executable Directory
        run: mkdir -p ${{ github.workspace }}/dist

      - name: Download NSIS
        run: |
          mkdir -p nsis
          Invoke-WebRequest -Uri "https://sourceforge.net/projects/nsis/files/NSIS%203/3.08/nsis-3.08-setup.exe/download" -OutFile "nsis-setup.exe"
          Start-Process -FilePath "nsis-setup.exe" -ArgumentList "/S", "/D=${{ github.workspace }}\nsis" -Wait
          $env:PATH += ";${{ github.workspace }}\nsis"
          echo "${{ github.workspace }}\nsis" | Out-File -FilePath $env:GITHUB_PATH -Append

      - name: Create Windows Installer
        run: |
          ./scripts/windows/create-installer.ps1

      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: system-bridge-windows-installer-${{ env.VERSION }}
          path: dist/*.exe
          retention-days: 7
