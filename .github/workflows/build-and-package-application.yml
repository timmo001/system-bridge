---
name: Build and package application

# yamllint disable-line rule:truthy
on:
  push:
    branches:
      - master
    tags:
      - "*"
  pull_request:
    types:
      - opened
      - synchronize
  workflow_dispatch: {}

env:
  STATIC_EXPORT: "true"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_type == 'tag' && format('tag-{0}', github.ref_name) || github.ref }}
  cancel-in-progress: ${{ github.ref_type != 'tag' }}

jobs:
  build-linux:
    name: Build and package (Linux)
    container:
      image: ghcr.io/${{ github.repository }}/ci-build-ubuntu:latest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: ./.github/actions/setup-go

      - name: Build web client
        uses: ./.github/actions/build-client-web

      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="5.0.0-dev+${{ github.sha }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Write version to file
        run: echo "${{ env.VERSION }}" > VERSION

      - name: Build application
        env:
          GOOS: linux
          GOARCH: amd64
          CGO_ENABLED: 1
        run: |
          go build -v -ldflags="-X 'github.com/timmo001/system-bridge/version.Version=${{ env.VERSION }}'" -o "system-bridge-linux"

      # Package for Linux
      - name: Package for Linux
        run: |
          mkdir -p dist
          chmod +x system-bridge-linux
          chmod +x .scripts/linux/create-*.sh
          ./.scripts/linux/create-appimage.sh &
          ./.scripts/linux/create-deb.sh &
          ./.scripts/linux/create-rpm.sh &
          docker run --rm -v ${{ github.workspace }}:/build archlinux:latest bash -c "\
            pacman -Syu --noconfirm && \
            pacman -S --noconfirm base-devel sudo && \
            useradd -m builduser && \
            echo 'builduser ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/builduser && \
            mkdir -p /home/builduser/build && \
            cp -r /build/* /home/builduser/build/ && \
            chown -R builduser:builduser /home/builduser/build && \
            cd /home/builduser/build/.scripts/linux && \
            su builduser -c './create-arch.sh' && \
            find /home/builduser/build -name '*.pkg.tar.zst' -exec cp {} /build/dist/ \;\
          " &
          VERSION=${{ env.VERSION }} ./.scripts/linux/create-flatpak.sh &
          wait

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: system-bridge-linux-packages-${{ env.VERSION }}
          path: dist/**
          retention-days: ${{ github.ref_type == 'tag' && 90 || 7 }}
    outputs:
      version: ${{ steps.get_version.outputs.version }}

  build-windows:
    name: Build and package (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download NowPlaying helper
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: ./.scripts/windows/download-now-playing.ps1

      - name: Setup Go
        uses: ./.github/actions/setup-go

      - name: Build web client
        uses: ./.github/actions/build-client-web

      - name: Setup MinGW
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64
          # https://github.com/egor-tensin/setup-mingw/issues/17#issuecomment-1890253793
          version: 12.2.0

      - name: Install NSIS
        run: choco install nsis -y --no-progress --limit-output

      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="5.0.0-dev+${{ github.sha }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate resource file
        run: |
          powershell -ExecutionPolicy Bypass -File ./.scripts/windows/generate-rc.ps1
          windres system-bridge.rc -O coff -o system-bridge.syso

      - name: Build application
        env:
          GOOS: windows
          GOARCH: amd64
          CGO_ENABLED: 1
          CC: gcc
        run: |
          go build -v -ldflags="-H windowsgui -X 'github.com/timmo001/system-bridge/version.Version=${{ env.VERSION }}'" -o "system-bridge.exe"

      - name: Package for Windows
        run: |
          mkdir -p dist
          Move-Item system-bridge.exe dist/system-bridge.exe
          ./.scripts/windows/create-installer.ps1

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: system-bridge-windows-packages-${{ env.VERSION }}
          path: dist/**
          retention-days: ${{ github.ref_type == 'tag' && 90 || 7 }}
    outputs:
      version: ${{ steps.get_version.outputs.version }}

  update-aur:
    name: Update AUR Package
    runs-on: ubuntu-latest
    needs: build-linux
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    env:
      VERSION: ${{ needs.build-linux.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Update AUR package
        env:
          AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
          VERSION: ${{ env.VERSION }}
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            GIT_BUILD="0"
          else
            GIT_BUILD="1"
          fi

          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -e AUR_SSH_PRIVATE_KEY="$AUR_SSH_PRIVATE_KEY" \
            -e GIT_BUILD="$GIT_BUILD" \
            -e GITHUB_SHA="$GITHUB_SHA" \
            -e GITHUB_WORKSPACE="/workspace" \
            -e VERSION="$VERSION" \
            -w /workspace \
            archlinux:latest \
            bash -c "
              echo '::group::Install and Update Packages' && \
              pacman -Syu --noconfirm && \
              pacman -S --noconfirm base-devel git openssh && \
              echo '::endgroup::' && \
              chmod +x .scripts/linux/update-aur.sh && \
              ./.scripts/linux/update-aur.sh
            "
      - name: Report AUR update status
        if: always()
        run: |
          if [ "${{ job.status }}" == 'success' ]; then
            echo "✅ AUR package updated successfully!"
            echo "Package: https://aur.archlinux.org/packages/system-bridge-git"
          else
            echo "❌ Failed to update AUR package"
            echo "Check the logs above for details"
          fi

  # create-release:
  #   name: Create release
  #   needs: build-and-package
  #   if: github.ref_type == 'tag' || github.ref == 'refs/heads/master'
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #   steps:
  #     - name: Download linux packages
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: system-bridge-linux-packages-${{ github.ref_name }}
  #         path: dist/linux

  #     - name: Download windows packages
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: system-bridge-windows-packages-${{ github.ref_name }}
  #         path: dist/windows

  #     - name: Create release
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         files: |
  #           dist/linux/*
  #           dist/windows/*
  #         draft: ${{ github.ref_type == 'tag' && 'false' || 'true' }}
  #         generate_release_notes: true
