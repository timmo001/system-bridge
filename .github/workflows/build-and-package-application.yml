---
name: Build and package application

# yamllint disable-line rule:truthy
on:
  push:
    branches:
      - master
    tags:
      - "*"
  pull_request:
    types:
      - opened
      - synchronize
  workflow_dispatch: {}

env:
  STATIC_EXPORT: "true"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_type == 'tag' && format('tag-{0}', github.ref_name) || github.ref }}
  cancel-in-progress: ${{ github.ref_type != 'tag' }}

jobs:
  build-linux:
    name: Build linux
    container:
      image: ghcr.io/${{ github.repository }}/ci-build-arch:latest
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Mark workspace safe for git
        run: git config --global --add safe.directory .

      - name: Setup Go
        uses: ./.github/actions/setup-go

      - name: Build web client
        uses: ./.github/actions/build-client-web

      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="5.0.0-dev+${{ github.sha }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Write version to file
        run: echo "${{ env.VERSION }}" > VERSION

      - name: Build application
        env:
          GOOS: linux
          GOARCH: amd64
          CGO_ENABLED: 1
        run: |
          go build -v -ldflags="-X 'github.com/timmo001/system-bridge/version.Version=${{ env.VERSION }}'" -o "system-bridge-linux"

      - name: Upload application
        uses: actions/upload-artifact@v4
        with:
          name: system-bridge-linux-${{ env.VERSION }}
          path: system-bridge-linux

  package-linux:
    name: Package linux
    needs:
      - build-linux
    container:
      image: ghcr.io/${{ github.repository }}/ci-build-arch:latest
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package:
          - arch
          - deb
          - rpm
          - flatpak
    env:
      VERSION: ${{ needs.build-linux.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download application
        uses: actions/download-artifact@v4
        with:
          name: system-bridge-linux-${{ env.VERSION }}
          path: .

      - name: Package for linux
        run: |
          echo "::group::Setup"
          mkdir -p dist
          chmod +x ./system-bridge-linux
          chmod +x ./.scripts/linux/create-*.sh
          echo "::endgroup::"

          echo "::group::List files"
          ls -la
          echo "::endgroup::"

          echo "::group::List scripts"
          ls -la ./.scripts/linux/
          echo "::endgroup::"

          echo "::group::Create ${{ matrix.package }} package"
          ./.scripts/linux/create-${{ matrix.package }}.sh
          echo "::endgroup::"

          echo "::group::List dist"
          ls -la dist
          echo "::endgroup::"

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: system-bridge-linux-packages-${{ matrix.package }}-${{ env.VERSION }}
          path: dist/**
          retention-days: ${{ github.ref_type == 'tag' && 90 || 7 }}

  build-package-windows:
    name: Build and package windows
    runs-on: windows-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download NowPlaying helper
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        if: ${{ env.GH_TOKEN != '' }}
        run: ./.scripts/windows/download-now-playing.ps1

      - name: Setup Go
        uses: ./.github/actions/setup-go

      - name: Build web client
        uses: ./.github/actions/build-client-web

      - name: Setup MinGW
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64
          # https://github.com/egor-tensin/setup-mingw/issues/17#issuecomment-1890253793
          version: 12.2.0

      - name: Install NSIS
        run: choco install nsis -y --no-progress --limit-output

      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="5.0.0-dev+${{ github.sha }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate resource file
        run: |
          powershell -ExecutionPolicy Bypass -File ./.scripts/windows/generate-rc.ps1
          windres system-bridge.rc -O coff -o system-bridge.syso

      - name: Build application
        env:
          GOOS: windows
          GOARCH: amd64
          CGO_ENABLED: 1
          CC: gcc
        run: |
          go build -v -ldflags="-H windowsgui -X 'github.com/timmo001/system-bridge/version.Version=${{ env.VERSION }}'" -o "system-bridge.exe"

      - name: Package for Windows
        run: |
          echo "::group::Setup"
          mkdir -p dist
          Move-Item system-bridge.exe dist/system-bridge.exe
          echo "::endgroup::"

          echo "::group::Create installer"
          ./.scripts/windows/create-installer.ps1
          echo "::endgroup::"

          echo "::group::List dist"
          Get-ChildItem dist -Recurse | Format-Table -AutoSize
          echo "::endgroup::"

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: system-bridge-windows-packages-${{ env.VERSION }}
          path: dist/**
          retention-days: ${{ github.ref_type == 'tag' && 90 || 7 }}
    outputs:
      version: ${{ steps.get_version.outputs.version }}

  update-aur:
    name: Update AUR Package
    container:
      image: ghcr.io/${{ github.repository }}/ci-build-arch:latest
    runs-on: ubuntu-latest
    needs:
      - build-linux
    if: github.ref == 'refs/heads/master' && github.event_name == 'push' || github.ref_type == 'tag'
    env:
      VERSION: ${{ needs.build-linux.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Update AUR package
        env:
          AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
          VERSION: ${{ env.VERSION }}
        run: |
          echo "::group::Setup"
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            GIT_BUILD="0"
          else
            GIT_BUILD="1"
          fi
          export GIT_BUILD
          chmod +x .scripts/linux/update-aur.sh

          if [ "$(id -u)" -eq 0 ] && id -u builduser >/dev/null 2>&1; then
            echo "Switching to builduser..."
            chown -R builduser:builduser "$(pwd)"
            exec sudo --preserve-env=VERSION,AUR_SSH_PRIVATE_KEY,GITHUB_SHA,GITHUB_WORKSPACE,GIT_BUILD -u builduser -H bash ./.scripts/linux/update-aur.sh
          fi
          echo "::endgroup::"

          echo "::group::Update AUR package"
          ./.scripts/linux/update-aur.sh
          echo "::endgroup::"

      - name: Report AUR update status
        if: always()
        run: |
          if [ "${{ job.status }}" == 'success' ]; then
            echo "✅ AUR package updated successfully!"
            if [[ "${{ github.ref_type }}" == "tag" ]]; then
              echo "Package: https://aur.archlinux.org/packages/system-bridge"
            else
              echo "Package: https://aur.archlinux.org/packages/system-bridge-git"
            fi
          else
            echo "❌ Failed to update AUR package"
            echo "Check the logs above for details"
          fi

  update-release:
    name: Update release
    needs:
      - build-linux
      - package-linux
      - build-package-windows
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download linux arch packages
        uses: actions/download-artifact@v4
        with:
          name: system-bridge-linux-packages-arch-${{ needs.build-linux.outputs.version }}
          path: dist/linux/arch

      - name: Download linux deb packages
        uses: actions/download-artifact@v4
        with:
          name: system-bridge-linux-packages-deb-${{ needs.build-linux.outputs.version }}
          path: dist/linux/deb

      - name: Download linux rpm packages
        uses: actions/download-artifact@v4
        with:
          name: system-bridge-linux-packages-rpm-${{ needs.build-linux.outputs.version }}
          path: dist/linux/rpm

      - name: Download linux flatpak packages
        uses: actions/download-artifact@v4
        with:
          name: system-bridge-linux-packages-flatpak-${{ needs.build-linux.outputs.version }}
          path: dist/linux/flatpak

      - name: Download windows packages
        uses: actions/download-artifact@v4
        with:
          name: system-bridge-windows-packages-${{ needs.build-package-windows.outputs.version }}
          path: dist/windows

      - name: Update release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/linux/arch/*.pkg.tar.zst
            dist/linux/deb/*.deb
            dist/linux/rpm/*.rpm
            dist/linux/flatpak/*.flatpak
            dist/windows/*-setup.exe
