name: CI

# yamllint disable-line rule:truthy
on:
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  workflow_dispatch:

# concurrency:
#   group: ${{ github.head_ref || github.ref }}
#   cancel-in-progress: true

jobs:
  lint-eslint:
    name: 👕 ESLint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.head_ref }}
      - name: 🏗 Set up Node.js
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 16.x
      - name: 🏗 Install linux dependencies
        run: |
          sudo apt update
          sudo apt install libavahi-compat-libdnssd-dev libxtst-dev libpng++-dev libxext-dev libxss-dev
      - name: ⤵️ Get yarn cache path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: ⤵️ Fetch Yarn cache
        uses: actions/cache@v2.1.6
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: ⤵️ Install dependencies
        run: |
          yarn install
        env:
          CI: true
      - name: 🚀 Run ESLint
        run: yarn eslint
  lint-jsonlint:
    name: 👕 JSONLint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.head_ref }}
      - name: 🚀 Run JSONLint
        run: |
          sudo apt install -y jsonlint
          for file in $(find ./ -type f -name "*.json"); do
            if ! jsonlint-php -q $file; then
              export FAILED=1
            else
              echo "$file OK"
            fi
          done
          if [ "${FAILED}" = "1" ]; then
            exit 1
          fi
  lint-markdownlint:
    name: 👕 MarkdownLint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.head_ref }}
      - name: 🚀 Run mdl
        uses: actionshub/markdownlint@2.0.2
  lint-markdown-links:
    name: 👕 Markdown Link Check
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.head_ref }}
      - name: 🚀 Run Markdown Links
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.13
        with:
          use-quiet-mode: no
          use-verbose-mode: no
          config-file: mlc_config.json
          folder-path: .github, frontend
          file-path: ./README.md
          max-depth: -1
          check-modified-files-only: no
          base-branch: master
          file-extension: .md
  lint-prettier:
    name: 👕 Prettier
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.head_ref }}
      - name: 🚀 Run Prettier
        uses: creyD/prettier_action@v3.3
        with:
          prettier_options: --write **/*.{js,json,ts,tsx,yml,yaml}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  lint-yamllint:
    name: 👕 YAMLLint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.head_ref }}
      - name: 🚀 Run YAMLLint
        uses: ibiqlik/action-yamllint@v3.0.2
        with:
          file_or_dir: .
          config_file: .yamllint.yml
          format: colored
          strict: false
  build-app:
    name: 🚀 Build Application
    runs-on: ${{ matrix.os.server }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: windows
            server: self-hosted
            platform: win32
          - name: linux
            server: ubuntu-latest
            platform: linux
          - name: macos
            server: macos-latest
            platform: darwin
    steps:
      - name: 🏗 Install linux dependencies
        if: matrix.os.server == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install libavahi-compat-libdnssd-dev libxtst-dev libpng++-dev libxext-dev libxss-dev
          wget https://github.com/goreleaser/nfpm/releases/download/v2.5.1/nfpm_amd64.deb
          sudo apt install ./nfpm_amd64.deb
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.head_ref }}
      - name: 🏗 Set up Node.js
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 16.x
      - name: ⤵️ Get yarn cache path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: ⤵️ Fetch Yarn cache
        uses: actions/cache@v2.1.6
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: 🏗 Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          yarn install:all:ci
      - name: 🚀 Package
        run: |
          yarn package
        env:
          NODE_ENV: production
          INLINE_RUNTIME_CHUNK: false
      - name: ⬆ Upload Artifacts - Output
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os.name }}-out
          path: out
      - name: 🚀 Create windows setup file
        if: matrix.os.platform == 'win32' && matrix.os.server == 'self-hosted'
        uses: joncloud/makensis-action@v3.6
        with:
          script-file: "scripts/installer.nsi"
      - name: ⬆ Upload Artifacts - Windows setup
        if: matrix.os.platform == 'win32' && matrix.os.server == 'self-hosted'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os.name }}-setup
          path: "*setup.exe"
      - name: 🚀 Create linux apk file
        if: matrix.os.platform == 'linux'
        run: |
          nfpm package --config nfpm.yaml --packager apk
      - name: ⬆ Upload Artifacts - Linux apk
        if: matrix.os.platform == 'linux'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os.name }}-apk
          path: "*.apk"
      - name: 🚀 Create linux deb file
        if: matrix.os.platform == 'linux'
        run: |
          nfpm package --config nfpm.yaml --packager deb
      - name: ⬆ Upload Artifacts - Linux deb
        if: matrix.os.platform == 'linux'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os.name }}-deb
          path: "*.deb"
      - name: 🚀 Create linux rpm file
        if: matrix.os.platform == 'linux'
        run: |
          nfpm package --config nfpm.yaml --packager rpm
      - name: ⬆ Upload Artifacts - Linux rpm
        if: matrix.os.platform == 'linux'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os.name }}-rpm
          path: "*.rpm"
